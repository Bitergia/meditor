{"children":{"ATTRS":{"description":["Average number of attributes defined in a class. This can be compared to the <a href=\"\/documentation\/metrics.html#TOPD\">total number of operands<\/a> (TOPD) considered at the class level, and is representative of the data complexity of the class (not including the complexity of methods)."],"mnemo":"ATTRS","name":"Average number of attributes","parents":{},"scale":[1,2,3,4]},"ATTRS_PUBLIC":{"description":["Average number of attributes defined in classes with a <code>public<\/code> modifier.","Publicness of attributes is meaningful for reusability: if there are a lot of public attributes available, it may be more time-consuming to find the right one. Also, good practices for object-oriented programming recommend to use getters and setters in most cases."],"mnemo":"ATTRS_PUBLIC","name":"Average number of public attributes","parents":{},"scale":[1,2,3,4]},"BRANCH_COVERAGE":{"description":["The percentage of branches that is exercised by the tests. The SonarQube measure used for this purpose is <mark>branch_coverage<\/mark>.","On a given line of code, Line coverage simply answers the following question: Has this line of code been executed during the execution of the unit tests?"],"mnemo":"BRANCH_COVERAGE","name":"Percentage of branches covered by tests","parents":{},"scale":[0,15,36.5,73.3]},"CI_JOBS":{"description":["The total number of jobs defined on the Hudson engine."],"ds":"Hudson","mnemo":"CI_JOBS","name":"Number of jobs","parents":{},"scale":[]},"CI_JOBS_FAILED_1W":{"description":["The number of jobs that failed during last week on the Hudson engine."],"ds":"Hudson","mnemo":"CI_JOBS_FAILED_1W","name":"Number of failed jobs on week","parents":{"QM_ACTIVITY":1},"scale":[10,5,3,0],"used":"false"},"CI_JOBS_GREEN":{"description":["The number of green (successful) jobs on the Hudson engine.","Green (or blue) jobs in Hudson define successful builds."],"ds":"Hudson","mnemo":"CI_JOBS_GREEN","name":"Number of green jobs","parents":{},"scale":[0,3,5,10]},"CI_JOBS_GREEN_RATIO":{"description":["The number of green (successful) jobs on the Hudson engine, divided by the total number of jobs.","Green (or blue) jobs in Hudson define successful builds."],"ds":"Hudson","mnemo":"CI_JOBS_GREEN_RATIO","name":"Ratio of green jobs","parents":{"QM_REL_ENG":1},"scale":[25,50,75,95],"used":"false"},"CI_JOBS_RED":{"description":["The number of red (failed) jobs on the Hudson engine.","Red jobs in Hudson define failed builds."],"ds":"Hudson","mnemo":"CI_JOBS_RED","name":"Number of red jobs","parents":{},"scale":[10,5,3,0]},"CI_JOBS_YELLOW":{"description":["The number of yellow (unstable) jobs on the Hudson engine.","Yellow jobs in Hudson define unstable builds. According to Hudson's documentation, a build is unstable if it was built successfully and one or more publishers report it unstable. For example if the JUnit publisher is configured and a test fails then the build will be marked unstable."],"ds":"Hudson","mnemo":"CI_JOBS_YELLOW","name":"Number of yellow jobs","parents":{},"scale":[10,5,3,0]},"CLASSES":{"description":["The number of Java classes, including nested classes, interfaces, enums and annotations.","The SonarQube measure used for this purpose is <mark>classes<\/mark>. This metric is often used as rule-of-thumb indicator for the size of software, and to make other measures relatives.","See also SonarQube's definitions for size metrics: <a href=\"http:\/\/docs.sonarqube.org\/display\/SONAR\/Metric+definitions#Metricdefinitions-Size\">http:\/\/docs.sonarqube.org\/display\/SONAR\/Metric+definitions#Metricdefinitions-Size<\/a>."],"mnemo":"CLASSES","name":"Number of classes","parents":{},"scale":[100,1000,10000,100000]},"COMMENT_LINES_DENSITY":{"description":["The ratio of source lines of code on the number of comment lines of code.","Density of comment lines = Comment lines \/ (Lines of code + Comment lines) * 100. With such a formula, <var>50%<\/var> means that the number of lines of code equals the number of comment lines and <var>100%<\/var> means that the file only contains comment lines. The SonarQube measure used for this purpose is <mark>comment_lines_density<\/mark>. ","See also SonarQube's page on comment lines metrics: <a href=\"http:\/\/docs.sonarqube.org\/display\/SONAR\/Metrics+-+Comment+lines\">http:\/\/docs.sonarqube.org\/display\/SONAR\/Metrics+-+Comment+lines<\/a>."],"mnemo":"COMMENT_LINES_DENSITY","name":"Comment rate","parents":{},"scale":[10,15,20,30]},"DL_REPO_1M":{"description":["The number of downloads on the web site of the project (download page) during last three months. Example of download page (for CDT) : http:\/\/www.eclipse.org\/downloads\/ ."],"mnemo":"DL_REPO_1M","name":"Number of downloads on the web site","parents":{},"scale":[1,2,3,4]},"DL_UPDATE_SITE_1M":{"description":["The number of downloads on the update site of the project during last three months. Is computed using successful and failed installs from marketplace."],"mnemo":"DL_UPDATE_SITE_1M","name":"Number of downloads on update site","parents":{},"scale":[1,2,3,4]},"DUPLICATED_LINES_DENSITY":{"description":["The amount of duplicated lines in the code, divided by the number of lines. This is expressed as a percentage; The SonarQube metric used for this purpose is <mark>duplicated_lines_density<\/mark>.","See also SonarQube's definition for duplications: <a href=\"http:\/\/docs.sonarqube.org\/display\/SONAR\/Metric+definitions#Metricdefinitions-Duplications\">http:\/\/docs.sonarqube.org\/display\/SONAR\/Metric+definitions#Metricdefinitions-Duplications<\/a>. There is a longer description of the code cloning algorithm here: <a href=\"http:\/\/docs.sonarqube.org\/display\/SONAR\/Duplications\">http:\/\/docs.sonarqube.org\/display\/SONAR\/Duplications<\/a>."],"mnemo":"DUPLICATED_LINES_DENSITY","name":"Cloning density","parents":{},"scale":[50,40,30,10]},"FILES":{"description":["The number of code files (e.g. with a <code>.java<\/code> for the Java language) in the source code hierarchy. The SonarQube measure used for this purpose is <mark>files<\/mark>. This metric is often used as rule-of-thumb indicator for the size of software, and to make other measures relatives."],"mnemo":"FILES","name":"Number of files","parents":{},"scale":[100,1000,10000,100000]},"FUNCTIONS":{"description":["The number of functions defined in the source files.","The SonarQube measure used for this purpose is <mark>functions<\/mark>. This metric is often used as rule-of-thumb indicator for the size of software, and to make other measures relatives.","See also SonarQube's definitions for size metrics: <a href=\"http:\/\/docs.sonarqube.org\/display\/SONAR\/Metric+definitions#Metricdefinitions-Size\">http:\/\/docs.sonarqube.org\/display\/SONAR\/Metric+definitions#Metricdefinitions-Size<\/a>. More details on the metric: <a href=\"http:\/\/docs.sonarqube.org\/display\/SONAR\/Metrics+-+Methods\">http:\/\/docs.sonarqube.org\/display\/SONAR\/Metrics+-+Methods<\/a>."],"mnemo":"FUNCTIONS","name":"Number of functions","parents":{},"scale":[100,1000,10000,100000]},"FUNCTION_COMPLEXITY":{"description":["The average number of execution paths found in functions.","Basically, the counter is incremented every time the control flow of the function splits, with any function having at least a cyclomatic number of 1. The sum of cyclomatic numbers for all functions is then divided by the number of functions. In SonarQube the measure is <code>function_complexity<\/code>.","The cyclomatic number is a measure borrowed from graph theory and was introduced to software engineering by McCabe in [<a href=\"\/documentation\/references.html\">McCabe1976<\/a>]. It is defined as the number of linearly independent paths that comprise the program. To have good testability and maintainability, McCabe recommends that no program modules (or functions as for Java) should exceed a cyclomatic number of 10. It is primarily defined at the function level and is summed up for higher levels of artefacts.","See also Wikipedia's entry on cyclomatic complexity: <a href=\"http:\/\/en.wikipedia.org\/wiki\/Cyclomatic_complexity\">http:\/\/en.wikipedia.org\/wiki\/Cyclomatic_complexity<\/a>.","See also SonarQube's definition for code complexity: <a href=\"http:\/\/docs.sonarqube.org\/display\/SONAR\/Metrics+-+Complexity\">http:\/\/docs.sonarqube.org\/display\/SONAR\/Metrics+-+Complexity<\/a>. There is also a discussion about its meaning here: <a href=\"http:\/\/www.sonarqube.org\/discussing-cyclomatic-complexity\/\">http:\/\/www.sonarqube.org\/discussing-cyclomatic-complexity\/<\/a>","See also the Maisqual wiki for more details on complexity measures: <a href=\"http:\/\/maisqual.squoring.com\/wiki\/index.php\/Category:Complexity_Metrics\">http:\/\/maisqual.squoring.com\/wiki\/index.php\/Category:Complexity_Metrics<\/a>."],"mnemo":"FUNCTION_COMPLEXITY","name":"Average Cyclomatic Complexity","parents":{},"scale":[5.3,3.5,2.8,2.3]},"IP_LOG_COV":{"description":["Percentage of contributions covered by an appropriate IP log.","Eclipse foundation has a very strict <a href=\"https:\/\/www.eclipse.org\/org\/documents\/Eclipse_IP_Policy.pdf\">IP policy<\/a> and this measure should always be 100%."],"mnemo":"IP_LOG_COV","name":"IP log code coverage","parents":{},"scale":[1,2,3,4]},"ITS_BUGS_DENSITY":{"description":["Ratio of the total number of tickets in the issue tracking system to the size of the source code in KLOC, at the time of the data retrieval. ","The subset of tickets considered from the issue tracking system are those specified in the project documentation, for example by specifying a tracker or a project name appearing in ticket data. Source code is all source code found in the source code management repository."],"mnemo":"ITS_BUGS_DENSITY","name":"Defect density","parents":{},"scale":[3.36826347305,0.0755602867593,0.0335380213652,0.009367219332]},"ITS_CHANGED":{"description":["Number of updates on issues during the overall time range covered by the analysis.","The subset of tickets considered from the issue tracking system are those specified in the project documentation, for example by specifying a tracker or a project name appearing in ticket data. Update means an operation on a ticket changing its state, or adding information. Opening and closing a ticket are considered as updates. Identities of updaters are the character strings found in the corresponding field in the ticket information. Time range is measured as a calendar month period starting the day before the data retrieval (example: if retrieval is on Feb 3rd, period is from Jan 3rd to Feb 2nd, both included)."],"mnemo":"ITS_CHANGED","name":"ITS issues changed lifetime","parents":{},"scale":[2,4,9.75,80]},"ITS_CHANGERS":{"description":["Number of distinct identities updating tickets during the overall time range covered by the analysis.","The subset of tickets considered from the issue tracking system are those specified in the project documentation, for example by specifying a tracker or a project name appearing in ticket data. Update means an operation on a ticket changing its state, or adding information. Opening and closing a ticket are considered as updates. Identities of updaters are the character strings found in the corresponding field in the ticket information. Time range is measured as a calendar month period starting the day before the data retrieval (example: if retrieval is on Feb 3rd, period is from Jan 3rd to Feb 2nd, both included)."],"mnemo":"ITS_CHANGERS","name":"ITS issues changers lifetime","parents":{},"scale":[2,4,9.75,80]},"ITS_CLOSED":{"description":["Number of issues closed during the overall time range covered by the analysis.","The subset of tickets considered from the issue tracking system are those specified in the project documentation, for example by specifying a tracker or a project name appearing in ticket data. Opened means that the ticket information was submitted to the issue traking system for the first time for that ticket. Identities of openers are the character strings found in the corresponding field in the ticket information. Time range is measured as a calendar month period starting the day before the data retrieval (example: if retrieval is on Feb 3rd, period is from Jan 3rd to Feb 2nd, both included). Number of lines are those calculated at the end of the period of analysis."],"mnemo":"ITS_CLOSED","name":"ITS issues closed lifetime","parents":{},"scale":[1,2,3,4]},"ITS_CLOSED_30":{"description":["Number of distinct identities opening tickets during the last month in the issue tracking system.","The subset of tickets considered from the issue tracking system are those specified in the project documentation, for example by specifying a tracker or a project name appearing in ticket data. Opened means that the ticket information was submitted to the issue traking system for the first time for that ticket. Identities of openers are the character strings found in the corresponding field in the ticket information. Time range is measured as a calendar month period starting the day before the data retrieval (example: if retrieval is on Feb 3rd, period is from Jan 3rd to Feb 2nd, both included). Number of lines are those calculated at the end of the period of analysis."],"mnemo":"ITS_CLOSED_30","name":"Number of issue closed during last month","parents":{},"scale":[1,2,3,4]},"ITS_CLOSERS":{"description":["Number of distinct identities closing tickets during during the overall time range covered by the analysis.","The subset of tickets considered from the issue tracking system are those specified in the project documentation, for example by specifying a tracker or a project name appearing in ticket data. Update means an operation on a ticket changing its state, or adding information. Opening and closing a ticket are considered as updates. Identities of updaters are the character strings found in the corresponding field in the ticket information. Time range is measured as a calendar month period starting the day before the data retrieval (example: if retrieval is on Feb 3rd, period is from Jan 3rd to Feb 2nd, both included)."],"mnemo":"ITS_CLOSERS","name":"ITS issue closers lifetime","parents":{},"scale":[2,4,9.75,80]},"ITS_CLOSERS_30":{"description":["Number of distinct identities closing tickets during the last month in the issue tracking system.","The subset of tickets considered from the issue tracking system are those specified in the project documentation, for example by specifying a tracker or a project name appearing in ticket data. Update means an operation on a ticket changing its state, or adding information. Opening and closing a ticket are considered as updates. Identities of updaters are the character strings found in the corresponding field in the ticket information. Time range is measured as a calendar month period starting the day before the data retrieval (example: if retrieval is on Feb 3rd, period is from Jan 3rd to Feb 2nd, both included)."],"mnemo":"ITS_CLOSERS_30","name":"ITS closers","parents":{},"scale":[2,4,9.75,80]},"ITS_OPENED":{"description":["Number of issues opened during the overall time range covered by the analysis.","The subset of tickets considered from the issue tracking system are those specified in the project documentation, for example by specifying a tracker or a project name appearing in ticket data. Opened means that the ticket information was submitted to the issue traking system for the first time for that ticket. Identities of openers are the character strings found in the corresponding field in the ticket information. Time range is measured as a calendar month period starting the day before the data retrieval (example: if retrieval is on Feb 3rd, period is from Jan 3rd to Feb 2nd, both included). Number of lines are those calculated at the end of the period of analysis."],"mnemo":"ITS_OPENED","name":"ITS issues opened lifetime","parents":{},"scale":[1,2,3,4]},"ITS_OPENERS":{"description":["Number of distinct identities opening tickets during the overall time range covered by the analysis.","The subset of tickets considered from the issue tracking system are those specified in the project documentation, for example by specifying a tracker or a project name appearing in ticket data. Opened means that the ticket information was submitted to the issue traking system for the first time for that ticket. Identities of openers are the character strings found in the corresponding field in the ticket information. Time range is measured as a calendar month period starting the day before the data retrieval (example: if retrieval is on Feb 3rd, period is from Jan 3rd to Feb 2nd, both included). Number of lines are those calculated at the end of the period of analysis."],"mnemo":"ITS_OPENERS","name":"ITS issue openers lifetime","parents":{},"scale":[1,2,3,4]},"ITS_UPDATES_3M":{"description":["Number of updates to tickets during the last three months, in the issue tracking system.","The subset of tickets considered from the issue tracking system are those specified in the project documentation, for example by specifying a tracker or a project name appearing in ticket data. Update means an operation on a ticket changing its state, or adding information. Opening and closing a ticket are considered as updates. Time range is measured as three calendar months period starting the day before the data retrieval (example: if retrieval is on Feb 3rd, period is from Jan 3rd to Feb 2nd, both included)."],"mnemo":"ITS_UPDATES_3M","name":"ITS updates","parents":{},"scale":[4,13,37,596]},"JIRA_AUTHORS":{"description":["Number of different authors who created issues during the lifetime of the project.","A high number of authors shows diversity and improves the bus factor of the project."],"ds":"JiraIts","mnemo":"JIRA_AUTHORS","name":"JIRA authors","parents":{},"scale":[2,4,9.75,80]},"JIRA_AUTHORS_1M":{"description":["Number of authors who created issues during last month. If today is 2017-02-01 then the range is from 2017-01-01 to 2017-02-01."],"ds":"JiraIts","mnemo":"JIRA_AUTHORS_1M","name":"JIRA authors last month","parents":{},"scale":[2,4,9.75,80]},"JIRA_AUTHORS_1W":{"description":["Number of authors who created issues during last week. If today is Wed. 2017-02-01 then the range is from Wed. 2017-01-25 to Wed. 2017-02-01."],"ds":"JiraIts","mnemo":"JIRA_AUTHORS_1W","name":"JIRA authors last week","parents":{},"scale":[2,4,9.75,80]},"JIRA_AUTHORS_1Y":{"description":["Number of authors who created issues during last year. If today is 2017-02-01 then the range is from 2016-02-01 to 2017-02-01."],"ds":"JiraIts","mnemo":"JIRA_AUTHORS_1Y","name":"JIRA authors last year","parents":{},"scale":[2,4,9.75,80]},"JIRA_CREATED_1M":{"description":["Number of issues created during last month. If today is 2017-02-01 then the range is from 2017-01-01 to 2017-02-01."],"ds":"JiraIts","mnemo":"JIRA_CREATED_1M","name":"JIRA issues created last month","parents":{},"scale":[2,4,9.75,80]},"JIRA_CREATED_1W":{"description":["Number of issues created during last week. If today is Wed. 2017-02-01 then the range is from Wed. 2017-01-25 to Wed. 2017-02-01."],"ds":"JiraIts","mnemo":"JIRA_CREATED_1W","name":"JIRA issues created last week","parents":{},"scale":[2,4,9.75,80]},"JIRA_CREATED_1Y":{"description":["Number of issues created during last year. If today is 2017-02-01 then the range is from 2016-02-01 to 2017-02-01."],"ds":"JiraIts","mnemo":"JIRA_CREATED_1Y","name":"JIRA issues created last year","parents":{},"scale":[2,4,9.75,80]},"JIRA_LATE":{"description":["Number of issues with a past due date.","It is considered good practice to keep this number low. Either fix it or maintain its due date."],"ds":"JiraIts","mnemo":"JIRA_LATE","name":"JIRA late issues","parents":{},"scale":[2,4,9.75,80]},"JIRA_OPEN":{"description":["Number of issues with a state 'open' at the time of analysis."],"ds":"JiraIts","mnemo":"JIRA_OPEN","name":"JIRA open issues","parents":{},"scale":[1,2,3,4]},"JIRA_OPEN_PERCENT":{"description":["Percentage of open issues compared to the overall number of issues registered in the system."],"ds":"JiraIts","mnemo":"JIRA_OPEN_PERCENT","name":"JIRA open issues (%)","parents":{},"scale":[1,2,3,4]},"JIRA_OPEN_UNASSIGNED":{"description":["Number of issues in state open with no assignee (i.e. pending).","It is considered to be good practice to keep this number low. In an active project, people would either work on the bug (i.e. assign it) or triage it (pass it to some other state or assigning it)."],"ds":"JiraIts","mnemo":"JIRA_OPEN_UNASSIGNED","name":"JIRA pending issues","parents":{},"scale":[1,2,3,4]},"JIRA_UPDATED_1M":{"description":["Number of issues updated during last month. If today is 2017-02-01 then the range is from 2017-01-01 to 2017-02-01."],"ds":"JiraIts","mnemo":"JIRA_UPDATED_1M","name":"JIRA issues updated last month","parents":{},"scale":[2,4,9.75,80]},"JIRA_UPDATED_1W":{"description":["Number of issues updated during last week. If today is Wed. 2017-02-01 then the range is from Wed. 2017-01-25 to Wed. 2017-02-01."],"ds":"JiraIts","mnemo":"JIRA_UPDATED_1W","name":"JIRA issues updated last week","parents":{},"scale":[2,4,9.75,80]},"JIRA_UPDATED_1Y":{"description":["Number of issues updated during last year. If today is 2017-02-01 then the range is from 2016-02-01 to 2017-02-01."],"ds":"JiraIts","mnemo":"JIRA_UPDATED_1Y","name":"JIRA issues updated last year","parents":{},"scale":[2,4,9.75,80]},"JIRA_VOL":{"description":["Number of issues registered in the database, whatever their state is."],"ds":"JiraIts","mnemo":"JIRA_VOL","name":"JIRA total issues","parents":{},"scale":[1,2,3,4]},"JOBS":{"description":["The total number of jobs defined on the Hudson engine."],"mnemo":"JOBS","name":"Number of jobs","parents":{},"scale":[1,2,3,4]},"JOBS_FAILED_1W":{"description":["The number of jobs that failed during last week on the Hudson engine."],"mnemo":"JOBS_FAILED_1W","name":"Number of failed jobs","parents":{},"scale":[1,2,3,4]},"JOBS_GREEN":{"description":["The number of green(successful) jobs on the Hudson engine.","Green (or blue) jobs in Hudson define successful builds."],"mnemo":"JOBS_GREEN","name":"Number of green jobs","parents":{},"scale":[1,2,3,4]},"JOBS_RED":{"description":["The number of red (failed) jobs on the Hudson engine.","Red jobs in Hudson define failed builds."],"mnemo":"JOBS_RED","name":"Number of red jobs","parents":{},"scale":[1,2,3,4]},"JOBS_YELLOW":{"description":["The number of yellow (unstable) jobs on the Hudson engine.","Yellow jobs in Hudson define unstable builds. According to Hudson's documentation, a build is unstable if it was built successfully and one or more publishers report it unstable. For example if the JUnit publisher is configured and a test fails then the build will be marked unstable."],"mnemo":"JOBS_YELLOW","name":"Number of yellow jobs","parents":{},"scale":[1,2,3,4]},"LIC_IDENT":{"description":["Is there a list of the different licences used in the product?","This measure may use an external tool like Ninka (<a href=\"http:\/\/ninka.turingmachine.org\/\">ninka.turingmachine.org<\/a>) to identify the licence of components used in the project. Another way would be to identify a file named LICENCES in the root folder."],"mnemo":"LIC_IDENT","name":"License identification","parents":{},"scale":[1,2,3,4]},"LINE_COVERAGE":{"description":["The percentage of source lines of code that is exercised by the tests. The SonarQube measure used for this purpose is <mark>line_coverage<\/mark>."],"mnemo":"LINE_COVERAGE","name":"Percentage of lines of code covered by tests","parents":{},"scale":[0,20,48.89,87.7]},"MDIT":{"description":["The maximum depth of inheritance tree of a class within the inheritance hierarchy is defined as the maximum length from the considered class to the root of the class hierarchy tree and is measured by the number of ancestor classes. In cases involving multiple inheritance, the MDIT is the maximum length from the node to the root of the tree [<a href=\"\/documentation\/references.html#Chidamber1994\">Chidamber1994<\/a>].","A deep inheritance tree makes the understanding of the object-oriented architecture difficult. Well structured OO systems have a forest of classes rather than one large inheritance lattice. The deeper the class is within the hierarchy, the greater the number of methods it is likely to inherit, making it more complex to predict its behavior and, therefore, more fault-prone [<a href=\"\/documentation\/references.html#Chidamber1994\">Chidamber1994<\/a>]. However, the deeper a particular tree is in a class, the greater potential reuse of inherited methods [<a href=\"\/documentation\/references.html#Chidamber1994\">Chidamber1994<\/a>].","See also SonarQube's page on the depth in tree: <a href=\"http:\/\/docs.sonarqube.org\/display\/SONAR\/Metrics+-+Depth+in+Tree\">http:\/\/docs.sonarqube.org\/display\/SONAR\/Metrics+-+Depth+in+Tree<\/a>"],"mnemo":"MDIT","name":"Depth of Inheritance Tree","parents":{},"scale":[1,2,3,4]},"METHS":{"description":["Average number of methods defined in the class. This can be compared to the <a href=\"\/documentation\/metrics.html#TOPD\">total number of operators<\/a> (TOPT) considered at the class level."],"mnemo":"METHS","name":"Average number of methods","parents":{},"scale":[1,2,3,4]},"METHS_PUBLIC":{"description":["Average number of methods defined in classes with a <code>public<\/code> modifier.","Publicness of methods is meaningful for reusability: if there are a lot of public methods available, it may be more time-consuming to find the right one."],"mnemo":"METHS_PUBLIC","name":"Average number of public methods","parents":{},"scale":[1,2,3,4]},"MKT_FAV":{"description":["The number of favourites on the Eclipse Marketplace for the project.","This measure uses the MarketPlace REST API to retrieve the number of registered users who marked this project as a favourite. If the project is not registered on the Marketplace, the metric should be zero."],"mnemo":"MKT_FAV","name":"Number of favourites on the Marketplace","parents":{},"scale":[10,30,70,300]},"MKT_INSTALL_SUCCESS_1M":{"description":["The number of successful installs for the project as reported on the Marketplace during the last three months.","This measure uses the list of successful installs available on the Marketplace for every registered project. Here is <a href=\"http:\/\/marketplace.eclipse.org\/content\/eclipse-cdt-cc-development-tooling\">an example of log page<\/a>, metrics tab. If the project is not registered on the Marketplace, the metric should be zero."],"mnemo":"MKT_INSTALL_SUCCESS_1M","name":"Number of successfull installs on the Marketplace","parents":{},"scale":[100,500,1000,10000]},"MLS_SENDERS_30":{"description":["Number of distinct senders for messages dated during the last month, in developer mailing list archives. ","Developer mailing list is the list or lists considered as 'for developers' in the project documentation. The date used is the mailing list server date, as stamped in the message. Time range is measured as three calendar months period starting the day before the data retrieval (example: if retrieval is on Feb 3rd, period is from Jan 3rd to Feb 2nd, both included). Distinct senders are those with distinct email addresses. Email addresses used are the strings found in 'From:' fields in messages.","Note that developer communications are measured through the mailing list, and user communications are measured through the forums."],"mnemo":"MLS_SENDERS_30","name":"ML authors","parents":{},"scale":[1.5,3,7.5,26]},"MLS_SENT_30":{"description":["Number of messages dated during the last month, in developer mailing list archives.","Developer mailing list is the list or lists considered as 'for developers' in the project documentation. The date used is the mailing list server date, as stamped in the message. Time range is measured as one calendar month period starting the day before the data retrieval (example: if retrieval is on Feb 3rd, period is from Jan 3rd to Feb 2nd, both included).","Note that developer communications are measured through the mailing list, and user communications are measured through the forums."],"mnemo":"MLS_SENT_30","name":"ML posts","parents":{},"scale":[2,6,22,103]},"MLS_SENT_RESPONSE":{"description":["Number of responses (i.e. replies in a thread) in developer mailing list archives.","Threads are identified using 'In-Reply-To' message headers. Developer mailing list is the list or lists considered as 'for developers' in the project documentation.","Note that developer communications are measured through the mailing list, and user communications are measured through the forums."],"mnemo":"MLS_SENT_RESPONSE","name":"ML sent responses","parents":{},"scale":[2,6,22,103]},"MLS_THREADS":{"description":["Number of threads (i.e. an email and its replies) in developer mailing list archives.","Threads are identified using 'In-Reply-To' message headers. Developer mailing list is the list or lists considered as 'for developers' in the project documentation.","Note that developer communications are measured through the mailing list, and user communications are measured through the forums."],"mnemo":"MLS_THREADS","name":"ML threads","parents":{},"scale":[2,6,22,103]},"NCC_ANA":{"description":["The total number of violations of rules that impact analysability in the source code.","See also the <a href=\"\/documentation\/rules.html\">page on practices<\/a> for a list of checked rules and their associated impact on quality characteristics."],"mnemo":"NCC_ANA","name":"Number of non-conformities for analysability","parents":{},"scale":[1,2,3,4]},"NCC_ANA_IDX":{"description":["The total number of violations of rules that impact analysability in the source code, divided by the number of thousands of lines of code.","See also the <a href=\"\/documentation\/rules.html\">page on practices<\/a> for a list of checked rules and their associated impact on quality characteristics."],"mnemo":"NCC_ANA_IDX","name":"Average number of non-conformities for analysability","parents":{},"scale":[1,0.5,0.3,0.1]},"NCC_CHA":{"description":["The total number of violations of rules that impact changeability in the source code.","See also the <a href=\"\/documentation\/rules.html\">page on practices<\/a> for a list of checked rules and their associated impact on quality characteristics."],"mnemo":"NCC_CHA","name":"Number of non-conformities for changeability","parents":{},"scale":[1,2,3,4]},"NCC_CHA_IDX":{"description":["The total number of violations of rules that impact changeability in the source code, divided by the number of thousands of lines of code.","See also the <a href=\"\/documentation\/rules.html\">page on practices<\/a> for a list of checked rules and their associated impact on quality characteristics."],"mnemo":"NCC_CHA_IDX","name":"Average number of non-conformities for changeability","parents":{},"scale":[3,1,0.5,0.3]},"NCC_REL":{"description":["The total number of violations of rules that impact reliability in the source code.","See also the <a href=\"\/documentation\/rules.html\">page on practices<\/a> for a list of checked rules and their associated impact on quality characteristics."],"mnemo":"NCC_REL","name":"Number of non-conformities for reliability","parents":{},"scale":[1,2,3,4]},"NCC_REL_IDX":{"description":["The total number of violations of rules that impact reliability in the source code, divided by the number of thousands of lines of code.","See also the <a href=\"\/documentation\/rules.html\">page on practices<\/a> for a list of checked rules and their associated impact on quality characteristics."],"mnemo":"NCC_REL_IDX","name":"Average number of non-conformities for reliability","parents":{},"scale":[1,0.5,0.3,0.1]},"NCC_REU":{"description":["The total number of violations of rules that impact reusability in the source code.","See also the <a href=\"\/documentation\/rules.html\">page on practices<\/a> for a list of checked rules and their associated impact on quality characteristics."],"mnemo":"NCC_REU","name":"Number of non-conformities for reusability","parents":{},"scale":[1,2,3,4]},"NCC_REU_IDX":{"description":["The total number of violations of rules that impact reusability in the source code, divided by the number of thousands of lines of code.","See also the <a href=\"\/documentation\/rules.html\">page on practices<\/a> for a list of checked rules and their associated impact on quality characteristics."],"mnemo":"NCC_REU_IDX","name":"Average number of non-conformities for reusability","parents":{},"scale":[3,1,0.5,0.3]},"NCLOC":{"description":["Number of physical lines that contain at least one character which is neither a whitespace or a tabulation or part of a comment. This is mapped to SonarQube's <mark>ncloc<\/mark> metric.","See also SonarQube's definition for size metrics: <a href=\"http:\/\/docs.sonarqube.org\/display\/SONAR\/Metric+definitions#Metricdefinitions-Size\">http:\/\/docs.sonarqube.org\/display\/SONAR\/Metric+definitions#Metricdefinitions-Size<\/a>. More details can be seen here: <a href=\"http:\/\/docs.sonarqube.org\/display\/SONAR\/Metrics+-+Lines+of+code\">http:\/\/docs.sonarqube.org\/display\/SONAR\/Metrics+-+Lines+of+code<\/a>"],"mnemo":"NCLOC","name":"Source Lines Of Code","parents":{},"scale":[915828,198290.25,97961.5,38776.25]},"NEST":{"description":["The maximum depth of nesting counts the highest number of imbricated code (including conditions and loops) in a function. ","Deeper nesting threatens understandability of code and induces more test cases to run the different branches. Practitioners usually consider that a function with three or more nested levels becomes significantly more difficult for the human mind to apprehend how it works."],"mnemo":"NEST","name":"Maximum depth of nesting","parents":{},"scale":[1,2,3,4]},"PLAN_MILESTONES_VOL":{"description":["The number of milestones that occured during the last five releases.","Milestones are retrieved from the PMI file and are counted whatever their target release is. Milestones are useful to assess the maturity of the release and improves predictability of the project's output, in terms of quality and time."],"mnemo":"PLAN_MILESTONES_VOL","name":"Number of milestones","parents":{},"scale":[1,5,10,20]},"PLAN_NEXT_MILESTONE":{"description":["Is the project on time for the next milestone?"],"mnemo":"PLAN_NEXT_MILESTONE","name":"Project is on time for next milestone","parents":{},"scale":[1,2,3,4]},"PLAN_REVIEWS_SUCCESS_RATE":{"description":["What is the percentage of successful reviews over the past 5 releases?","The reviews are retrieved from the project management infrastructure record, and are considered successful if the entry is equal to <mark>success<\/mark>. If there are less than 5 releases defined, the percentage is computed on these only."],"mnemo":"PLAN_REVIEWS_SUCCESS_RATE","name":"Reviews success rate","parents":{},"scale":[20,40,60,80]},"PMI_ACCESS_INFO":{"description":["Is the access info (downloads, update sites..) correctly filled in the PMI records?","The project management infrastructure file holds information about how to access binaries of the project. This test checks the number of access-related entries defined in the PMI: download_url, downloads, update_sites."],"ds":"EclipsePmi","mnemo":"PMI_ACCESS_INFO","name":"Access information","parents":{"QM_SUPPORT":1},"scale":[0,1,2,3],"used":"false"},"PMI_DOC_INFO":{"description":["Is the documentation info correctly filled in the PMI records?","The project management infrastructure file holds information about various documentation and manuals. This test checks the number of doc-related entries defined in the PMI: build_doc, documentation, documentation_url, forums, gettingstarted_url, mailing_lists, website_url, wiki_url."],"ds":"EclipsePmi","mnemo":"PMI_DOC_INFO","name":"Doc information","parents":{"QM_SUPPORT":1},"scale":[0,2,4,6],"used":"false"},"PMI_ITS_INFO":{"description":["Is the bugzilla info correctly filled in the PMI records?","The project management infrastructure file holds information about one or more bugzilla instances. This test checks that at least one bugzilla instance is defined, with a product identifier, a create_url to enter a new issue, and a query_url to fetch all the issues for the project."],"ds":"EclipsePmi","mnemo":"PMI_ITS_INFO","name":"ITS information","parents":{"QM_SUPPORT":1},"scale":[2,3,4,5],"used":"false"},"PMI_REL_VOL":{"description":["The number of releases recorded in the PMI.","Milestones are retrieved from the PMI file and are counted whatever their target release is. Milestones are useful to assess the maturity of the release and improves predictability of the project's output, in terms of quality and time."],"ds":"EclipsePmi","mnemo":"PMI_REL_VOL","name":"Number of releases","parents":{"QM_REL_ENG":1},"scale":[1,3,5,10],"used":"false"},"PMI_SCM_INFO":{"description":["Is the source_repo info correctly filled in the PMI records? ","The project management infrastructure file holds information about one or more source repositories. This test checks that at least one source repository is defined, and accessible."],"ds":"EclipsePmi","mnemo":"PMI_SCM_INFO","name":"SCM information","parents":{"QM_SCM":1,"QM_SUPPORT":1},"scale":[0,1,1,2],"used":"false"},"PUBLIC_API":{"description":["Number of public Classes + number of public Functions + number of public Properties. The SonarQube measure used for this purpose is <mark>public_api<\/mark>.","See also SonarQube's definition for size metrics: <a href=\"http:\/\/docs.sonarqube.org\/display\/SONAR\/Metric+definitions#Metricdefinitions-Size\">http:\/\/docs.sonarqube.org\/display\/SONAR\/Metric+definitions#Metricdefinitions-Size<\/a>. More details can be seen here: <a href=\"http:\/\/docs.sonarqube.org\/display\/SONAR\/Metrics+-+Public+API\">http:\/\/docs.sonarqube.org\/display\/SONAR\/Metrics+-+Public+API<\/a>"],"mnemo":"PUBLIC_API","name":"Public API","parents":{},"scale":[48347,14018,6497.5,2420.75]},"PUBLIC_API_DOC":{"description":["The percentage of documented API accesses. Density of public documented API = (Public API - Public undocumented API) \/ Public API * 100. The SonarQube measure used for this purpose is <mark>public_documented_api_density<\/mark>.","See also SonarQube's definition for size metrics: <a href=\"http:\/\/docs.sonarqube.org\/display\/SONAR\/Metric+definitions#Metricdefinitions-Size\">http:\/\/docs.sonarqube.org\/display\/SONAR\/Metric+definitions#Metricdefinitions-Size<\/a>. "],"mnemo":"PUBLIC_API_DOC","name":"Public documented API","parents":{},"scale":[1,2,3,4]},"RKO_ANA":{"description":["The number of analysability rules that have at least one violation on the artefact."],"mnemo":"RKO_ANA","name":"Number of violated rules for analysability","parents":{},"scale":[1,2,3,4]},"RKO_CHA":{"description":["The number of changeability rules that have at least one violation on the artefact."],"mnemo":"RKO_CHA","name":"Number of violated rules for changeability","parents":{},"scale":[1,2,3,4]},"RKO_REL":{"description":["The number of reliability rules that have at least one violation on the artefact."],"mnemo":"RKO_REL","name":"Number of violated rules for reliability","parents":{},"scale":[1,2,3,4]},"RKO_REU":{"description":["The number of reusability rules that have at least one violation on the artefact."],"mnemo":"RKO_REU","name":"Number of violated rules for reusability","parents":{},"scale":[1,2,3,4]},"ROKR_ANA":{"description":["Ratio of conform analysability practices on the number of checked analysability practices."],"mnemo":"ROKR_ANA","name":"Adherence to analysability rules","parents":{},"scale":[10,30,50,75]},"ROKR_CHA":{"description":["Ratio of conform changeability practices on the number of checked changeability practices."],"mnemo":"ROKR_CHA","name":"Adherence to changeability rules","parents":{},"scale":[10,30,50,75]},"ROKR_REL":{"description":["Ratio of conform reliability practices on the number of checked reliability practices."],"mnemo":"ROKR_REL","name":"Adherence to reliability rules","parents":{},"scale":[10,30,50,75]},"ROKR_REU":{"description":["Ratio of conform reusability practices on the number of checked reusability practices."],"mnemo":"ROKR_REU","name":"Adherence to reusability rules","parents":{},"scale":[10,30,50,75]},"RULES_ANA":{"description":["The total number of rules checked for analysability."],"mnemo":"RULES_ANA","name":"Number of rules for analysability","parents":{},"scale":[1,2,3,4]},"RULES_CHA":{"description":["The total number of rules checked for changeability."],"mnemo":"RULES_CHA","name":"Number of rules for changeability","parents":{},"scale":[1,2,3,4]},"RULES_REL":{"description":["The total number of rules checked for reliability."],"mnemo":"RULES_REL","name":"Number of rules for reliability","parents":{},"scale":[1,2,3,4]},"RULES_REU":{"description":["The total number of rules checked for reusability."],"mnemo":"RULES_REU","name":"Number of rules for reusability","parents":{},"scale":[1,2,3,4]},"SCM_AUTHORS":{"description":["Total number of identities found as authors of commits in source code management repository.","Source code management repositories are those considered as such in the project documentation. Commits in all branches are considered. Date used for each commit is 'author date' (when there is a difference between author date and committer date). An identity is considered as author if it appears as such in the commit record (for systems logging several identities related to the commit, authoring identity will be considered)."],"ds":"Git","mnemo":"SCM_AUTHORS","name":"SCM authors","parents":{},"scale":[1,2,3,18]},"SCM_AUTHORS_1M":{"description":["Total number of identities found as authors of commits in source code management repositories dated during the last month.","Source code management repositories are those considered as such in the project documentation. Date used for each commit is 'author date' (when there is a difference between author date and committer date). Time range is measured as a one month period starting the day before the data retrieval (example: if retrieval is on Feb 3rd, period is from Jan 3rd to Feb 2nd, both included)."],"ds":"Git","mnemo":"SCM_AUTHORS_1M","name":"SCM authors one month","parents":{"QM_DIVERSITY":1,"QM_SCM":1},"scale":[1,2,3,18],"used":"false"},"SCM_AUTHORS_1W":{"description":["Total number of identities found as authors of commits in source code management repositories dated during the last week.","Source code management repositories are those considered as such in the project documentation. Date used for each commit is 'author date' (when there is a difference between author date and committer date). Time range is measured as a one week period starting the day before the data retrieval."],"ds":"Git","mnemo":"SCM_AUTHORS_1W","name":"SCM authors one week","parents":{},"scale":[1,2,3,18]},"SCM_AUTHORS_1Y":{"description":["Total number of identities found as authors of commits in source code management repositories dated during the last year.","Source code management repositories are those considered as such in the project documentation. Date used for each commit is 'author date' (when there is a difference between author date and committer date). Time range is measured as a one year period starting the day before the data retrieval (example: if retrieval is on Feb 3rd 2016, period is from Feb 3rd 2015 to Feb 3rd 2016, both included)."],"ds":"Git","mnemo":"SCM_AUTHORS_1Y","name":"SCM authors one year","parents":{},"scale":[1,2,3,18]},"SCM_AUTHORS_30":{"description":["Total number of identities found as authors of commits in source code management repositories dated during the last three months.","Source code management repositories are those considered as such in the project documentation. Commits in all branches are considered. Date used for each commit is 'author date' (when there is a difference between author date and committer date). An identity is considered as author if it appears as such in the commit record (for systems logging several identities related to the commit, authoring identity will be considered). Time range is measured as three calendar months period starting the day before the data retrieval (example: if retrieval is on Feb 3rd, period is from Jan 3rd to Feb 2nd, both included)."],"mnemo":"SCM_AUTHORS_30","name":"SCM committers","parents":{},"scale":[1,2,3,18]},"SCM_COMMITS":{"description":["Total number of commits in source code management repositories.","Source code management repositories are those considered as such in the project documentation. Date used for each commit is 'author date' (when there is a difference between author date and committer date). "],"ds":"Git","mnemo":"SCM_COMMITS","name":"SCM Commits","parents":{},"scale":[2,5,13,121]},"SCM_COMMITS_1M":{"description":["Total number of commits in source code management repositories dated during the last month.","Source code management repositories are those considered as such in the project documentation. Date used for each commit is 'author date' (when there is a difference between author date and committer date). Time range is measured as a one month period starting the day before the data retrieval (example: if retrieval is on Feb 3rd, period is from Jan 3rd to Feb 2nd, both included)."],"ds":"Git","mnemo":"SCM_COMMITS_1M","name":"SCM Commits one month","parents":{"QM_ACTIVITY":1,"QM_SCM":1},"scale":[2,5,13,121],"used":"false"},"SCM_COMMITS_1W":{"description":["Total number of commits in source code management repositories dated during the last week.","Source code management repositories are those considered as such in the project documentation. Date used for each commit is 'author date' (when there is a difference between author date and committer date). Time range is measured as a one week period starting the day before the data retrieval."],"ds":"Git","mnemo":"SCM_COMMITS_1W","name":"SCM Commits one week","parents":{},"scale":[2,5,13,121]},"SCM_COMMITS_1Y":{"description":["Total number of commits in source code management repositories dated during the last year.","Source code management repositories are those considered as such in the project documentation. Date used for each commit is 'author date' (when there is a difference between author date and committer date). Time range is measured as a one year period starting the day before the data retrieval (example: if retrieval is on Feb 3rd 2016, period is from Feb 3rd 2015 to Feb 3rd 2016, both included)."],"ds":"Git","mnemo":"SCM_COMMITS_1Y","name":"SCM Commits one year","parents":{},"scale":[2,5,13,121]},"SCM_COMMITS_30":{"description":["Total number of commits in source code management repositories dated during the last three months.","Source code management repositories are those considered as such in the project documentation. Commits in all branches are considered. Date used for each commit is 'author date' (when there is a difference between author date and committer date). Time range is measured as three calendar months period starting the day before the data retrieval (example: if retrieval is on Feb 3rd, period is from Jan 3rd to Feb 2nd, both included)."],"mnemo":"SCM_COMMITS_30","name":"SCM Commits","parents":{},"scale":[2,5,13,121]},"SCM_COMMITTERS":{"description":["Total number of identities found as committers of commits in source code management repository.","Source code management repositories are those considered as such in the project documentation. Commits in all branches are considered. Date used for each commit is 'committer date' (when there is a difference between author date and committer date). An identity is considered as committer if it appears as such in the commit record."],"ds":"Git","mnemo":"SCM_COMMITTERS","name":"SCM committers","parents":{},"scale":[1,2,3,18]},"SCM_COMMITTERS_1M":{"description":["Total number of identities found as committers of commits in source code management repositories dated during the last month.","Source code management repositories are those considered as such in the project documentation. Date used for each commit is 'committer date' (when there is a difference between author date and committer date). Time range is measured as a one month period starting the day before the data retrieval (example: if retrieval is on Feb 3rd, period is from Jan 3rd to Feb 2nd, both included)."],"ds":"Git","mnemo":"SCM_COMMITTERS_1M","name":"SCM committers one month","parents":{},"scale":[1,2,3,18]},"SCM_COMMITTERS_1W":{"description":["Total number of identities found as committers of commits in source code management repositories dated during the last week.","Source code management repositories are those considered as such in the project documentation. Date used for each commit is 'committer date' (when there is a difference between author date and committer date). Time range is measured as a one week period starting the day before the data retrieval."],"ds":"Git","mnemo":"SCM_COMMITTERS_1W","name":"SCM committers one week","parents":{},"scale":[1,2,3,18]},"SCM_COMMITTERS_1Y":{"description":["Total number of identities found as committers of commits in source code management repositories dated during the last year.","Source code management repositories are those considered as such in the project documentation. Date used for each commit is 'committer date' (when there is a difference between author date and committer date). Time range is measured as a one year period starting the day before the data retrieval (example: if retrieval is on Feb 3rd 2016, period is from Feb 3rd 2015 to Feb 3rd 2016, both included)."],"ds":"Git","mnemo":"SCM_COMMITTERS_1Y","name":"SCM committers one year","parents":{},"scale":[1,2,3,18]},"SCM_FILES":{"description":["Total number of files touched by commits in source code management repositories dated during the last three months.","Source code management repositories are those considered as such in the project documentation. Commits in all branches are considered. A file is 'touched' by a commit if its content or its path are modified by the commit. Date used for each commit is 'author date' (when there is a difference between author date and committer date). Time range is measured as three calendar months period starting the day before the data retrieval (example: if retrieval is on Feb 3rd, period is from Jan 3rd to Feb 2nd, both included)."],"mnemo":"SCM_FILES","name":"SCM Files committed","parents":{},"scale":[3,19,95.75,2189]},"SCM_MOD_LINES":{"description":["Total number of changed lines (added, removed, changed) in source code management repositories.","Source code management repositories are those considered as such in the project documentation. Date used for each commit is 'author date' (when there is a difference between author date and committer date). "],"ds":"Git","mnemo":"SCM_MOD_LINES","name":"SCM Changed Lines","parents":{},"scale":[1000,5000,50000,500000]},"SCM_MOD_LINES_1M":{"description":["Total number of changed lines (added, removed, changed) in source code management repositories dated during the last month.","Source code management repositories are those considered as such in the project documentation. Date used for each commit is 'author date' (when there is a difference between author date and committer date). Time range is measured as a one month period starting the day before the data retrieval (example: if retrieval is on Feb 3rd, period is from Jan 3rd to Feb 2nd, both included)."],"ds":"Git","mnemo":"SCM_MOD_LINES_1M","name":"SCM Changed Lines one month","parents":{"QM_ACTIVITY":1},"scale":[20,50,100,500],"used":"false"},"SCM_MOD_LINES_1W":{"description":["Total number of changed lines (added, removed, changed) in source code management repositories dated during the last week.","Source code management repositories are those considered as such in the project documentation. Date used for each commit is 'author date' (when there is a difference between author date and committer date). Time range is measured as a one week period starting the day before the data retrieval."],"ds":"Git","mnemo":"SCM_MOD_LINES_1W","name":"SCM Changed Lines one week","parents":{},"scale":[10,20,50,100]},"SCM_MOD_LINES_1Y":{"description":["Total number of changed lines (added, removed, changed) in source code management repositories dated during the last year.","Source code management repositories are those considered as such in the project documentation. Date used for each commit is 'author date' (when there is a difference between author date and committer date). Time range is measured as a one year period starting the day before the data retrieval (example: if retrieval is on Feb 3rd 2016, period is from Feb 3rd 2015 to Feb 3rd 2016, both included)."],"ds":"Git","mnemo":"SCM_MOD_LINES_1Y","name":"SCM Changed Lines one year","parents":{},"scale":[50,100,500,1000]},"SCM_STABILITY_3M":{"description":["Average number of commits touching each file in source code management repositories dated during the last three months. ","Source code management repositories are those considered as such in the project documentation. Commits in all branches are considered. A file is 'touched' by a commit if its content or its path are modified by the commit. Date used for each commit is 'author date' (when there is a difference between author date and committer date). Time range is measured as three calendar months period starting the day before the data retrieval (example: if retrieval is on Feb 3rd, period is from Jan 3rd to Feb 2nd, both included)."],"mnemo":"SCM_STABILITY_3M","name":"File stability index","parents":{},"scale":[3.79487179487,1.4430952381,1.14285714286,1]},"SO_ANSWERS_VOL_5Y":{"description":["The number of answers to questions related to the project's tag posted on Stack Overflow during the last 5 years.","Having many answers posted about the project indicates a strong interest from the community, and a good support. The list of questions and their answers associated to the tag can be browsed on the <a href=\"https:\/\/stackoverflow.com\/questions\/tagged\/java\">Stack Overflow web site<\/a>."],"ds":"StackOverflow","mnemo":"SO_ANSWERS_VOL_5Y","name":"Stack Overflow Answers (5Y)","parents":{},"scale":[1,2,3,4]},"SO_ANSWER_RATE_5Y":{"description":["The average number of answers per questions related to the project's tag on Stack Overflow during the last 5 years.","Having many answers posted about the project indicates a strong interest from the community, and a good support. The list of questions and their answers associated to the tag can be browsed on the <a href=\"https:\/\/stackoverflow.com\/questions\/tagged\/java\">Stack Overflow web site<\/a>."],"ds":"StackOverflow","mnemo":"SO_ANSWER_RATE_5Y","name":"Stack Overflow Answer rate (5Y)","parents":{},"scale":[1,2,4,5]},"SO_ASKERS_5Y":{"description":["The number of distinct people asking questions related to the project's tag posted on Stack Overflow during the last 5 years.","Having many people ask questions about the project indicates a strong interest from the community, and a good support. The list of questions and their answers associated to the tag can be browsed on the <a href=\"https:\/\/stackoverflow.com\/questions\/tagged\/java\">Stack Overflow web site<\/a>."],"ds":"StackOverflow","mnemo":"SO_ASKERS_5Y","name":"Stack Overflow Askers (5Y)","parents":{},"scale":[1,3,5,10]},"SO_QUESTIONS_VOL_5Y":{"description":["The number of questions related to the project's tag posted on Stack Overflow during the last 5 years.","Having many questions posted about the project indicates a strong interest from the community. The list of questions associated to the tag can be browsed on the <a href=\"https:\/\/stackoverflow.com\/questions\/tagged\/java\">Stack Overflow web site<\/a>."],"ds":"StackOverflow","mnemo":"SO_QUESTIONS_VOL_5Y","name":"Stack Overflow Questions (5Y)","parents":{},"scale":[5,50,400,800]},"SO_VIEWS_VOL_5Y":{"description":["The total number of views for questions related to the project's tag on Stack Overflow during the last 5 years.","Having many views on questions about the project indicates a strong interest from the community. The list of questions and their answers associated to the tag can be browsed on the <a href=\"https:\/\/stackoverflow.com\/questions\/tagged\/java\">Stack Overflow web site<\/a>."],"ds":"StackOverflow","mnemo":"SO_VIEWS_VOL_5Y","name":"Stack Overflow Views (5Y)","parents":{},"scale":[100,1000,2500,5000]},"SO_VOTES_VOL_5Y":{"description":["The total number of votes on questions related to the project's tag on Stack Overflow during the last 5 years.","Having many votes on questions about the project indicates a strong interest from the community. The list of questions and their answers associated to the tag can be browsed on the <a href=\"https:\/\/stackoverflow.com\/questions\/tagged\/java\">Stack Overflow web site<\/a>."],"ds":"StackOverflow","mnemo":"SO_VOTES_VOL_5Y","name":"Stack Overflow Votes (5Y)","parents":{},"scale":[10,100,250,500]},"SQ_COMMENT_LINES":{"description":["Number of lines containing either comment or commented-out code.","Non-significant comment lines (empty comment lines, comment lines containing only special characters, etc.) do not increase the number of comment lines.","For Java, file headers are not counted as comment lines (as they usually define the license).","Lines containing the following instructions are counted both as comments and lines of code: AUTHOR, INSTALLATION, DATE-COMPILED, DATE-WRITTEN, SECURITY."],"ds":"SonarQube45","mnemo":"SQ_COMMENT_LINES","name":"Number of comment lines","parents":{},"scale":[500,1000,10000,50000]},"SQ_COMR":{"description":["Density of comment lines = Comment lines \/ (Lines of code + Comment lines) * 100.","With such a formula, 50% means that the number of lines of code equals the number of comment lines and 100% means that the file only contains comment lines"],"ds":"SonarQube45","mnemo":"SQ_COMR","name":"Comment lines density","parents":{},"scale":[10,20,30,40]},"SQ_COM_CODE":{"description":["Commented lines of code","See more information about commented code on <a href=\"https:\/\/blog.sonarsource.com\/commented-out-code-eradication-with-sonar\/\">SonarQube doc web site<\/a>. There is a well-documented debate on <a href=\"http:\/\/softwareengineering.stackexchange.com\/questions\/190096\/can-commented-out-code-be-valuable-documentation\">Stack Overflow<\/a> as well."],"ds":"SonarQube45","mnemo":"SQ_COM_CODE","name":"Commented code","parents":{},"scale":[40,30,20,10]},"SQ_COVERAGE":{"description":["Overall test coverage."],"ds":"SonarQube45","mnemo":"SQ_COVERAGE","name":"Test coverage","parents":{},"scale":[10,20,40,50]},"SQ_COVERAGE_BRANCH":{"description":["Branch test coverage."],"ds":"SonarQube45","mnemo":"SQ_COVERAGE_BRANCH","name":"Branch coverage","parents":{},"scale":[10,20,40,50]},"SQ_COVERAGE_LINE":{"description":["Line test coverage."],"ds":"SonarQube45","mnemo":"SQ_COVERAGE_LINE","name":"Line coverage","parents":{},"scale":[10,20,40,50]},"SQ_CPX":{"description":["It is the complexity calculated based on the number of paths through the code. Whenever the control flow of a function splits, the complexity counter gets incremented by one. Each function has a minimum complexity of 1. This calculation varies slightly by language because keywords and functionalities do.","For more information on line counting for each language, see <a href=\"https:\/\/docs.sonarqube.org\/display\/SONAR\/Metrics+-+Complexity\">https:\/\/docs.sonarqube.org\/display\/SONAR\/Metrics+-+Complexity<\/a>."],"ds":"SonarQube45","mnemo":"SQ_CPX","name":"Total complexity","parents":{},"scale":[]},"SQ_CPX_CLASS_IDX":{"description":[],"parents":{},"scale":[]},"SQ_CPX_FILE_IDX":{"description":["Average complexity by file."],"ds":"SonarQube45","mnemo":"SQ_CPX_FILE_IDX","name":"File complexity","parents":{},"scale":[10,20,30,40]},"SQ_CPX_FUNC_IDX":{"description":[],"parents":{},"scale":[]},"SQ_DUPLICATED_BLOCKS":{"description":[],"parents":{},"scale":[]},"SQ_DUPLICATED_FILES":{"description":[],"parents":{},"scale":[]},"SQ_DUPLICATED_LINES":{"description":[],"parents":{},"scale":[]},"SQ_DUPLICATED_LINES_DENSITY":{"description":["Density of duplication = Duplicated lines \/ Lines * 100."],"ds":"SonarQube45","mnemo":"SQ_DUPLICATED_LINES_DENSITY","name":"Duplicated lines (%)","parents":{},"scale":[40,30,20,10]},"SQ_FILES":{"description":["The total number of files analysed."],"ds":"SonarQube45","mnemo":"SQ_FILES","name":"Number of files","parents":{},"scale":[100,500,1000,5000]},"SQ_FILES_CYCLES":{"description":[],"parents":{},"scale":[]},"SQ_FUNCS":{"description":["Number of functions. Depending on the language, a function is either a function or a method or a paragraph.","For Java, constructors are considered as methods and accessors are considered as methods if the sonar.squid.analyse.property.accessors property is set to false.","For Cobol, it is the number of paragraphs."],"ds":"SonarQube45","mnemo":"SQ_FUNCS","name":"Number of functions","parents":{},"scale":[300,500,3000,5000]},"SQ_ISSUES_OPEN":{"description":[],"parents":{},"scale":[]},"SQ_ISSUES_UNREVIEWED":{"description":[],"parents":{},"scale":[]},"SQ_NCLOC":{"description":["Number of physical lines that contain at least one character which is neither a whitespace or a tabulation or part of a comment.","For Cobol, generated lines of code and pre-processing instructions (SKIP1, SKIP2, SKIP3, COPY, EJECT, REPLACE) are not counted as lines of code."],"ds":"SonarQube45","mnemo":"SQ_NCLOC","name":"Number of lines of code","parents":{},"scale":[500,1000,10000,50000]},"SQ_NCLOC_LANG":{"description":[],"parents":{},"scale":[]},"SQ_PACKAGES_CYCLES":{"description":[],"parents":{},"scale":[]},"SQ_PACKAGES_TANGLE_IDX":{"description":[],"parents":{},"scale":[]},"SQ_PUBLIC_API":{"description":["Number of public Classes + number of public Functions + number of public Properties"],"ds":"SonarQube45","mnemo":"SQ_PUBLIC_API","name":"Public API","parents":{},"scale":[500,1000,5000,10000]},"SQ_PUBLIC_API_DOC_DENSITY":{"description":["Density of public documented API = (Public API - Public undocumented API) \/ Public API * 100"],"ds":"SonarQube45","mnemo":"SQ_PUBLIC_API_DOC_DENSITY","name":"Public documented API (%)","parents":{},"scale":[40,30,20,10]},"SQ_PUBLIC_UNDOC_API":{"description":[],"parents":{},"scale":[]},"SQ_RULES":{"description":[],"parents":{},"scale":[]},"SQ_SQALE_DEBT_RATIO":{"description":[],"parents":{},"scale":[]},"SQ_SQALE_INDEX":{"description":["Effort to fix all maintainability issues. The measure is stored in minutes in the DB."],"ds":"SonarQube45","mnemo":"SQ_SQALE_INDEX","name":"Technical debt","parents":{},"scale":[5000,1000,500,100]},"SQ_SQALE_RATING":{"description":["Rating given to your project related to the value of your Technical Debt Ratio. The default Maintainability Rating grid is: A=0-0.05, B=0.06-0.1, C=0.11-0.20, D=0.21-0.5, E=0.51-1.","The Maintainability Rating scale can be alternately stated by saying that if the outstanding remediation cost depends on the time that has already gone into the application: A &lt;=5% , B between 6 to 10%, C between 11 to 20%, D between 21 to 50%, and anything over 50% is an E."],"ds":"SonarQube45","mnemo":"SQ_SQALE_RATING","name":"Maintainability rating","parents":{},"scale":[0.05,0.1,0.2,0.5]},"SQ_STATEMENTS":{"description":["Number of statements.","For Java, it is the number of statements as defined in the Java Language Specification but without block definitions. Statements counter gets incremented by one each time a following keyword is encountered: <code>if, else, while, do, for, switch, break, continue, return, throw, synchronized, catch, finally.<\/code>.","Statements counter is not incremented by a class, method, field, annotation definition, package declaration and import declaration.","For Cobol, a statement is one of <code>move, if, accept, add, alter, call, cancel, close, compute, continue, delete, display, divide, entry, evaluate, exitProgram, goback, goto, initialize, inspect, merge, multiply, open, perform, read, release, return, rewrite, search, set, sort, start, stop, string, subtract, unstring, write, exec, ibmXmlParse, ibmXmlGenerate, readyReset, mfCommit, mfRollback<\/code>."],"ds":"SonarQube45","mnemo":"SQ_STATEMENTS","name":"Number of statements","parents":{},"scale":[500,1000,10000,50000]},"SQ_TESTS":{"description":[],"parents":{},"scale":[]},"SQ_TEST_SUCCESSFUL_DENSITY":{"description":[],"parents":{},"scale":[]},"SQ_VIOLATIONS":{"description":[],"parents":{},"scale":[]},"SQ_VIOLATIONS_BLOCKER":{"description":["The total number of issues (violations) found by SonarQube with a severity equal to BLOCKER."],"ds":"SonarQube45","mnemo":"SQ_VIOLATIONS_BLOCKER","name":"Number of blocker issues","parents":{},"scale":[100,50,10,1]},"SQ_VIOLATIONS_BLOCKER_NEW":{"description":[],"parents":{},"scale":[]},"SQ_VIOLATIONS_CRITICAL":{"description":["The total number of issues (violations) found by SonarQube with a severity equal to CRITICAL."],"ds":"SonarQube45","mnemo":"SQ_VIOLATIONS_CRITICAL","name":"Number of critical issues","parents":{},"scale":[500,100,50,10]},"SQ_VIOLATIONS_CRITICAL_NEW":{"description":[],"parents":{},"scale":[]},"SQ_VIOLATIONS_INFO":{"description":["The total number of issues (violations) found by SonarQube with a severity equal to INFO."],"ds":"SonarQube45","mnemo":"SQ_VIOLATIONS_INFO","name":"Number of info issues","parents":{},"scale":[5000,1000,500,100]},"SQ_VIOLATIONS_INFO_NEW":{"description":[],"parents":{},"scale":[]},"SQ_VIOLATIONS_MAJOR":{"description":["The total number of issues (violations) found by SonarQube with a severity equal to MAJOR."],"ds":"SonarQube45","mnemo":"SQ_VIOLATIONS_MAJOR","name":"Number of major issues","parents":{},"scale":[500,100,50,10]},"SQ_VIOLATIONS_MAJOR_NEW":{"description":[],"parents":{},"scale":[]},"SQ_VIOLATIONS_MINOR":{"description":["The total number of issues (violations) found by SonarQube with a severity equal to MINOR."],"ds":"SonarQube45","mnemo":"SQ_VIOLATIONS_MINOR","name":"Number of minor issues","parents":{},"scale":[500,100,50,10]},"SQ_VIOLATIONS_MINOR_NEW":{"description":[],"parents":{},"scale":[]},"SQ_VIOLATIONS_NEW":{"description":[],"parents":{},"scale":[]},"TEST_SUCCESS_DENSITY":{"description":["The percentage of failed tests during the last execution of the test plan. The SonarQube measure used for this purpose is <mark>test_success_density<\/mark>.","Computation is as follows: Test success density = (Unit tests - (Unit test errors + Unit test failures)) \/ Unit tests * 100, where Unit test errors is the number of unit tests that have failed, Unit test failures is the number of unit tests that have failed with an unexpected exception."],"mnemo":"TEST_SUCCESS_DENSITY","name":"Test success density","parents":{},"scale":[50,65,80,95]},"TST_VOL_IDX":{"description":["The total number of test cases for the product, divided by the number of thousands of SLOC.","Metric is computed from SonarQube <mark>tests<\/mark> and <mark>ncloc<\/mark> metrics."],"mnemo":"TST_VOL_IDX","name":"Number of tests relative to the code size","parents":{},"scale":[2,5,7,10]}},"name":"Alambic Metrics","version":"Mon Jan  8 01:55:14 2018"}